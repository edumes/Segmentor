#!/usr/bin/env python3
"""
Script de build para criar execut√°vel .app do Segmentor para macOS

Este script automatiza o processo de:
1. Verificar depend√™ncias
2. Converter √≠cone SVG para .icns
3. Criar execut√°vel com PyInstaller
4. Configurar permiss√µes
5. Validar o bundle .app
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

class SegmentorBuilder:
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.assets_dir = self.project_root / "assets"
        self.dist_dir = self.project_root / "dist"
        self.build_dir = self.project_root / "build"
        
    def check_dependencies(self):
        """Verifica se todas as depend√™ncias est√£o instaladas"""
        print("üîç Verificando depend√™ncias...")
        
        required_packages = [
            ('PyInstaller', 'PyInstaller'),
            ('PyQt6', 'PyQt6'),
            ('opencv-python', 'cv2'),
            ('numpy', 'numpy'),
            ('Pillow', 'PIL')
        ]
        
        missing_packages = []
        for package_name, import_name in required_packages:
            try:
                __import__(import_name)
                print(f"‚úÖ {package_name} - OK")
            except ImportError:
                missing_packages.append(package_name)
                print(f"‚ùå {package_name} - FALTANDO")
        
        if missing_packages:
            print(f"\n‚ö†Ô∏è  Instale as depend√™ncias faltantes:")
            print(f"pip install {' '.join(missing_packages)}")
            return False
        
        return True
    
    def convert_icon(self):
        """Converte √≠cone SVG para .icns usando sips (nativo do macOS)"""
        print("üé® Convertendo √≠cone...")
        
        svg_path = self.assets_dir / "icon.svg"
        png_path = self.assets_dir / "icon.png"
        icns_path = self.assets_dir / "icon.icns"
        
        if not svg_path.exists():
            print(f"‚ùå Arquivo SVG n√£o encontrado: {svg_path}")
            return False
        
        try:
            # Converter SVG para PNG de alta resolu√ß√£o
            subprocess.run([
                'qlmanage', '-t', '-s', '1024', '-o', str(self.assets_dir), str(svg_path)
            ], check=True, capture_output=True)
            
            # Renomear arquivo gerado pelo qlmanage
            generated_png = self.assets_dir / "icon.svg.png"
            if generated_png.exists():
                generated_png.rename(png_path)
            
            # Converter PNG para ICNS
            subprocess.run([
                'sips', '-s', 'format', 'icns', str(png_path), '--out', str(icns_path)
            ], check=True, capture_output=True)
            
            # Limpar arquivo PNG tempor√°rio
            if png_path.exists():
                png_path.unlink()
            
            print(f"‚úÖ √çcone convertido: {icns_path}")
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erro ao converter √≠cone: {e}")
            # Fallback: criar um √≠cone b√°sico
            return self.create_fallback_icon()
    
    def create_fallback_icon(self):
        """Cria um √≠cone b√°sico caso a convers√£o falhe"""
        print("üîÑ Criando √≠cone alternativo...")
        
        try:
            from PIL import Image, ImageDraw, ImageFont
            
            # Criar imagem 512x512
            img = Image.new('RGBA', (512, 512), (74, 144, 226, 255))
            draw = ImageDraw.Draw(img)
            
            # Desenhar c√≠rculo
            draw.ellipse([50, 50, 462, 462], fill=(255, 255, 255, 200))
            
            # Adicionar texto
            try:
                font = ImageFont.truetype('/System/Library/Fonts/Arial.ttf', 60)
            except:
                font = ImageFont.load_default()
            
            text = "SEG"
            bbox = draw.textbbox((0, 0), text, font=font)
            text_width = bbox[2] - bbox[0]
            text_height = bbox[3] - bbox[1]
            x = (512 - text_width) // 2
            y = (512 - text_height) // 2
            
            draw.text((x, y), text, fill=(74, 144, 226, 255), font=font)
            
            # Salvar como PNG e converter para ICNS
            png_path = self.assets_dir / "icon.png"
            img.save(png_path, 'PNG')
            
            icns_path = self.assets_dir / "icon.icns"
            subprocess.run([
                'sips', '-s', 'format', 'icns', str(png_path), '--out', str(icns_path)
            ], check=True, capture_output=True)
            
            png_path.unlink()
            print("‚úÖ √çcone alternativo criado")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao criar √≠cone alternativo: {e}")
            return False
    
    def clean_build_dirs(self):
        """Limpa diret√≥rios de build anteriores"""
        print("üßπ Limpando builds anteriores...")
        
        for dir_path in [self.build_dir, self.dist_dir]:
            if dir_path.exists():
                try:
                    shutil.rmtree(dir_path)
                    print(f"‚úÖ Removido: {dir_path}")
                except Exception as e:
                    print(f"‚ö†Ô∏è  Aviso ao remover {dir_path}: {e}")
        
        return True
    
    def build_app(self):
        """Executa PyInstaller para criar o .app"""
        print("üî® Construindo aplicativo...")
        
        spec_file = self.project_root / "segmentor.spec"
        
        if not spec_file.exists():
            print(f"‚ùå Arquivo spec n√£o encontrado: {spec_file}")
            return False
        
        try:
            cmd = [sys.executable, '-m', 'PyInstaller', '--clean', str(spec_file)]
            result = subprocess.run(cmd, cwd=self.project_root, capture_output=True, text=True)
            
            if result.returncode != 0:
                print(f"‚ùå Erro no PyInstaller:")
                print(result.stderr)
                return False
            
            print("‚úÖ Build conclu√≠do com sucesso")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro durante build: {e}")
            return False
    
    def set_permissions(self):
        """Configura permiss√µes corretas para o .app"""
        print("üîê Configurando permiss√µes...")
        
        app_path = self.dist_dir / "Segmentor.app"
        
        if not app_path.exists():
            print(f"‚ùå Aplicativo n√£o encontrado: {app_path}")
            return False
        
        try:
            # Tornar execut√°vel
            subprocess.run(['chmod', '+x', str(app_path / "Contents" / "MacOS" / "Segmentor")], check=True)
            
            # Configurar permiss√µes do bundle
            subprocess.run(['chmod', '-R', '755', str(app_path)], check=True)
            
            print("‚úÖ Permiss√µes configuradas")
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erro ao configurar permiss√µes: {e}")
            return False
    
    def validate_app(self):
        """Valida o bundle .app criado"""
        print("‚úÖ Validando aplicativo...")
        
        app_path = self.dist_dir / "Segmentor.app"
        
        # Verificar estrutura b√°sica
        required_paths = [
            app_path / "Contents",
            app_path / "Contents" / "MacOS" / "Segmentor",
            app_path / "Contents" / "Info.plist",
            app_path / "Contents" / "Resources"
        ]
        
        for path in required_paths:
            if not path.exists():
                print(f"‚ùå Arquivo/diret√≥rio faltando: {path}")
                return False
        
        # Verificar se √© execut√°vel
        executable = app_path / "Contents" / "MacOS" / "Segmentor"
        if not os.access(executable, os.X_OK):
            print(f"‚ùå Execut√°vel sem permiss√£o: {executable}")
            return False
        
        print("‚úÖ Aplicativo validado com sucesso")
        print(f"üì¶ Aplicativo criado em: {app_path}")
        return True
    
    def build(self):
        """Executa todo o processo de build"""
        print("üöÄ Iniciando build do Segmentor para macOS...\n")
        
        steps = [
            ("Verificar depend√™ncias", self.check_dependencies),
            ("Converter √≠cone", self.convert_icon),
            ("Limpar builds anteriores", self.clean_build_dirs),
            ("Construir aplicativo", self.build_app),
            ("Configurar permiss√µes", self.set_permissions),
            ("Validar aplicativo", self.validate_app)
        ]
        
        for step_name, step_func in steps:
            print(f"\nüìã {step_name}...")
            if not step_func():
                print(f"\n‚ùå Build falhou na etapa: {step_name}")
                return False
        
        print("\nüéâ Build conclu√≠do com sucesso!")
        print(f"\nüì± Seu aplicativo est√° pronto em: {self.dist_dir / 'Segmentor.app'}")
        print("\nüí° Para testar, execute: open dist/Segmentor.app")
        return True

def main():
    if sys.platform != 'darwin':
        print("‚ùå Este script deve ser executado no macOS")
        sys.exit(1)
    
    builder = SegmentorBuilder()
    success = builder.build()
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()